/* UVa problem: 100 - 3n+1
 * Topic: Number Theory
 * Brief problem description:
 *   Given 2, find the max cycle generated by putting each number between
 *   them through this algorithm: if odd then X <- 3*X+1, if even then X<-X/2
 *   until you reach 1. The max cycle is the largest cycle of ONE number not
 *   the total number of all cycles in the range.   
 *
 * Solution Summary:
 *  Brute force exactly as the problem states. This solution probably will run 
 *  into time errors on really large numbers but is fine for this problem. 
 */
#include <iostream>
#include <algorithm>

using namespace std;

int cycleLength(int check){
	int c = 0;
	while(check != 1){
		if(check%2 != 0){
			check = check*3 + 1;
			check /= 2;
			c+=2;
		} else {
			check /= 2;
			c++;
		}
	}
	return c;
}

int main() {

	int x, y;
	while(cin >> x >> y){
		cout << x << " " << y << " ";

		int cycle = 0, max_cycle = 0;

		if(x > y) swap(x,y);

		for(int i = x; i <= y; i++){
			cycle = cycleLength(i);
			if(cycle > max_cycle)
				max_cycle = cycle;
		}

		cout << max_cycle+1 << endl;

	}

	return 0;
}
